#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'io/console'
require 'securerandom'

# –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
class PasswordGenerator
  # –ù–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  LOWERCASE = ('a'..'z').to_a.freeze
  UPPERCASE = ('A'..'Z').to_a.freeze
  DIGITS = ('0'..'9').to_a.freeze
  SPECIAL = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', 
             '+', '=', '[', ']', '{', '}', '|', '\\', ':', ';', '"', 
             "'", '<', '>', ',', '.', '?', '/', '~', '`'].freeze
  
  # –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö: 0, O, l, 1, I)
  READABLE_LOWER = ('a'..'z').to_a - ['l', 'o'].freeze
  READABLE_UPPER = ('A'..'Z').to_a - ['I', 'O'].freeze
  READABLE_DIGITS = ('2'..'9').to_a.freeze
  READABLE_SPECIAL = ['!', '@', '#', '$', '%', '^', '&', '*', '-', '_', '+', '='].freeze

  attr_accessor :length, :include_lowercase, :include_uppercase, 
                :include_digits, :include_special, :readable_only,
                :exclude_ambiguous, :min_special, :min_digits

  def initialize
    @length = 12
    @include_lowercase = true
    @include_uppercase = true
    @include_digits = true
    @include_special = true
    @readable_only = false
    @exclude_ambiguous = false
    @min_special = 1
    @min_digits = 1
  end

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  def generate
    charset = build_charset
    
    if charset.empty?
      raise "‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤!"
    end

    password = []
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä
    if @include_special && @min_special > 0
      special_chars = @readable_only ? READABLE_SPECIAL : SPECIAL
      @min_special.times { password << special_chars.sample }
    end
    
    if @include_digits && @min_digits > 0
      digits = @readable_only ? READABLE_DIGITS : DIGITS
      @min_digits.times { password << digits.sample }
    end
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    remaining_length = @length - password.length
    remaining_length.times { password << charset.sample }
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    password.shuffle.join
  end

  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π
  def generate_multiple(count)
    (1..count).map { generate }
  end

  # –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∏–ª—É –ø–∞—Ä–æ–ª—è
  def evaluate_strength(password)
    score = 0
    feedback = []

    # –î–ª–∏–Ω–∞
    case password.length
    when 0..7
      score += 1
      feedback << "üî¥ –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)"
    when 8..11
      score += 2
      feedback << "üü° –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ (8-11 —Å–∏–º–≤–æ–ª–æ–≤)"
    when 12..15
      score += 3
      feedback << "üü¢ –•–æ—Ä–æ—à–∞—è –¥–ª–∏–Ω–∞ (12-15 —Å–∏–º–≤–æ–ª–æ–≤)"
    else
      score += 4
      feedback << "üü¢ –û—Ç–ª–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ (16+ —Å–∏–º–≤–æ–ª–æ–≤)"
    end

    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    has_lower = password.match?(/[a-z]/)
    has_upper = password.match?(/[A-Z]/)
    has_digit = password.match?(/[0-9]/)
    has_special = password.match?(/[^a-zA-Z0-9]/)

    variety_count = [has_lower, has_upper, has_digit, has_special].count(true)
    
    case variety_count
    when 1
      score += 1
      feedback << "üî¥ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤"
    when 2
      score += 2
      feedback << "üü° –î–≤–∞ —Ç–∏–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤"
    when 3
      score += 3
      feedback << "üü¢ –¢—Ä–∏ —Ç–∏–ø–∞ —Å–∏–º–≤–æ–ª–æ–≤"
    when 4
      score += 4
      feedback << "üü¢ –í—Å–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤"
    end

    # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    unique_chars = password.chars.uniq.length
    repetition_ratio = unique_chars.to_f / password.length
    
    if repetition_ratio < 0.5
      score += 1
      feedback << "üî¥ –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤"
    elsif repetition_ratio < 0.8
      score += 2
      feedback << "üü° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è"
    else
      score += 3
      feedback << "üü¢ –ú–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
    end

    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    strength = case score
               when 0..4 then { level: "–û—á–µ–Ω—å —Å–ª–∞–±—ã–π", color: "üî¥", emoji: "üíÄ" }
               when 5..6 then { level: "–°–ª–∞–±—ã–π", color: "üü†", emoji: "‚ö†Ô∏è" }
               when 7..8 then { level: "–°—Ä–µ–¥–Ω–∏–π", color: "üü°", emoji: "‚ö°" }
               when 9..10 then { level: "–°–∏–ª—å–Ω—ã–π", color: "üü¢", emoji: "üõ°Ô∏è" }
               else { level: "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π", color: "üü¢", emoji: "üîí" }
               end

    { score: score, strength: strength, feedback: feedback }
  end

  private

  def build_charset
    charset = []
    
    if @readable_only
      charset += READABLE_LOWER if @include_lowercase
      charset += READABLE_UPPER if @include_uppercase
      charset += READABLE_DIGITS if @include_digits
      charset += READABLE_SPECIAL if @include_special
    else
      charset += LOWERCASE if @include_lowercase
      charset += UPPERCASE if @include_uppercase
      charset += DIGITS if @include_digits
      charset += SPECIAL if @include_special
    end
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if @exclude_ambiguous
      ambiguous = ['0', 'O', 'l', '1', 'I', '|', '`', "'"]
      charset -= ambiguous
    end
    
    charset
  end
end

# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
class PasswordGeneratorUI
  def initialize
    @generator = PasswordGenerator.new
    @running = true
  end

  def start
    show_welcome
    
    while @running
      show_menu
      handle_choice(get_user_input)
    end
    
    puts "\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–¥—ë–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏!"
  end

  private

  def show_welcome
    puts <<~WELCOME
      
      üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–∞ Ruby
      ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      
      üõ°Ô∏è  –°–æ–∑–¥–∞–≤–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!
      üéØ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
      üìä –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –ø–∞—Ä–æ–ª–µ–π
      
    WELCOME
  end

  def show_menu
    current_settings = format_current_settings
    
    puts <<~MENU
      
      ‚îå‚îÄ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
      ‚îÇ                                            ‚îÇ
      ‚îÇ  1Ô∏è‚É£  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å                   ‚îÇ
      ‚îÇ  2Ô∏è‚É£  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π        ‚îÇ
      ‚îÇ  3Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞                   ‚îÇ
      ‚îÇ  4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—É –ø–∞—Ä–æ–ª—è                  ‚îÇ
      ‚îÇ  5Ô∏è‚É£  –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã                       ‚îÇ
      ‚îÇ  6Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä–æ–ª–µ–π –≤ —Ñ–∞–π–ª                 ‚îÇ
      ‚îÇ  0Ô∏è‚É£  –í—ã—Ö–æ–¥                                  ‚îÇ
      ‚îÇ                                            ‚îÇ
      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
      
      #{current_settings}
      
      –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é: 
    MENU
  end

  def format_current_settings
    settings = []
    settings << "–î–ª–∏–Ω–∞: #{@generator.length}"
    
    types = []
    types << "—Å—Ç—Ä–æ—á–Ω—ã–µ" if @generator.include_lowercase
    types << "–ó–ê–ì–õ–ê–í–ù–´–ï" if @generator.include_uppercase
    types << "123—Ü–∏—Ñ—Ä—ã" if @generator.include_digits
    types << "!@#—Å–ø–µ—Ü" if @generator.include_special
    
    settings << "–¢–∏–ø—ã: #{types.join(', ')}"
    settings << "–¢–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º—ã–µ" if @generator.readable_only
    settings << "–ú–∏–Ω. —Å–ø–µ—Ü: #{@generator.min_special}" if @generator.include_special
    settings << "–ú–∏–Ω. —Ü–∏—Ñ—Ä: #{@generator.min_digits}" if @generator.include_digits
    
    "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: #{settings.join(' | ')}"
  end

  def handle_choice(choice)
    case choice
    when '1'
      generate_single_password
    when '2'
      generate_multiple_passwords
    when '3'
      settings_menu
    when '4'
      check_password_strength
    when '5'
      show_examples
    when '6'
      export_passwords
    when '0'
      @running = false
    else
      puts "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
    end
  end

  def generate_single_password
    begin
      password = @generator.generate
      evaluation = @generator.evaluate_strength(password)
      
      puts "\nüéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:"
      puts "‚îå#{'‚îÄ' * (password.length + 2)}‚îê"
      puts "‚îÇ #{password} ‚îÇ"
      puts "‚îî#{'‚îÄ' * (password.length + 2)}‚îò"
      
      puts "\nüìä –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã:"
      puts "#{evaluation[:strength][:emoji]} #{evaluation[:strength][:level]} (#{evaluation[:score]}/11 –±–∞–ª–ª–æ–≤)"
      
      evaluation[:feedback].each { |fb| puts "   #{fb}" }
      
      puts "\nüí° –•–æ—á–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å? (–≤–≤–µ–¥–∏ 'copy' –∏–ª–∏ –Ω–∞–∂–º–∏ Enter)"
      input = gets.chomp.downcase
      
      if input == 'copy'
        copy_to_clipboard(password)
      end
      
    rescue => e
      puts "‚ùå #{e.message}"
    end
  end

  def generate_multiple_passwords
    print "\nüî¢ –°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (1-20): "
    count = gets.chomp.to_i
    
    if count < 1 || count > 20
      puts "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20!"
      return
    end
    
    begin
      passwords = @generator.generate_multiple(count)
      
      puts "\nüéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:"
      puts "‚ïê" * 50
      
      passwords.each_with_index do |password, index|
        evaluation = @generator.evaluate_strength(password)
        strength_indicator = evaluation[:strength][:emoji]
        
        puts "#{index + 1}.".rjust(3) + " #{password} #{strength_indicator}"
      end
      
      puts "‚ïê" * 50
      puts "üíæ –•–æ—á–µ—à—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ —Ñ–∞–π–ª? (–¥–∞/–Ω–µ—Ç): "
      
      if gets.chomp.downcase == '–¥–∞'
        export_passwords_to_file(passwords)
      end
      
    rescue => e
      puts "‚ùå #{e.message}"
    end
  end

  def settings_menu
    loop do
      puts <<~SETTINGS
        
        ‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò –ì–ï–ù–ï–†–ê–¢–û–†–ê
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        1. –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: #{@generator.length}
        2. –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z): #{status_icon(@generator.include_lowercase)}
        3. –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z): #{status_icon(@generator.include_uppercase)}
        4. –¶–∏—Ñ—Ä—ã (0-9): #{status_icon(@generator.include_digits)}
        5. –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@#$%): #{status_icon(@generator.include_special)}
        6. –¢–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: #{status_icon(@generator.readable_only)}
        7. –ò—Å–∫–ª—é—á–∏—Ç—å –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ (0,O,l,1,I): #{status_icon(@generator.exclude_ambiguous)}
        8. –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤: #{@generator.min_special}
        9. –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä: #{@generator.min_digits}
        0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        
        –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: 
      SETTINGS
      
      choice = gets.chomp
      
      case choice
      when '1'
        change_length
      when '2'
        @generator.include_lowercase = !@generator.include_lowercase
      when '3'
        @generator.include_uppercase = !@generator.include_uppercase
      when '4'
        @generator.include_digits = !@generator.include_digits
      when '5'
        @generator.include_special = !@generator.include_special
      when '6'
        @generator.readable_only = !@generator.readable_only
      when '7'
        @generator.exclude_ambiguous = !@generator.exclude_ambiguous
      when '8'
        change_min_special
      when '9'
        change_min_digits
      when '0'
        break
      else
        puts "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!"
      end
    end
  end

  def change_length
    print "\nüìè –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (4-128): "
    length = gets.chomp.to_i
    
    if length >= 4 && length <= 128
      @generator.length = length
      puts "‚úÖ –î–ª–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ #{length}"
    else
      puts "‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤!"
    end
  end

  def change_min_special
    print "\nüî£ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (0-10): "
    min_special = gets.chomp.to_i
    
    if min_special >= 0 && min_special <= 10 && min_special <= @generator.length
      @generator.min_special = min_special
      puts "‚úÖ –ú–∏–Ω–∏–º—É–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤: #{min_special}"
    else
      puts "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10 –∏ –Ω–µ –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è!"
    end
  end

  def change_min_digits
    print "\nüî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä (0-10): "
    min_digits = gets.chomp.to_i
    
    if min_digits >= 0 && min_digits <= 10 && min_digits <= @generator.length
      @generator.min_digits = min_digits
      puts "‚úÖ –ú–∏–Ω–∏–º—É–º —Ü–∏—Ñ—Ä: #{min_digits}"
    else
      puts "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10 –∏ –Ω–µ –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è!"
    end
  end

  def check_password_strength
    print "\nüîç –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: "
    password = gets.chomp
    
    if password.empty?
      puts "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
      return
    end
    
    evaluation = @generator.evaluate_strength(password)
    
    puts "\nüìä –ê–ù–ê–õ–ò–ó –ü–ê–†–û–õ–Ø"
    puts "‚ïê" * 40
    puts "–ü–∞—Ä–æ–ª—å: #{password}"
    puts "–î–ª–∏–Ω–∞: #{password.length} —Å–∏–º–≤–æ–ª–æ–≤"
    puts "–û—Ü–µ–Ω–∫–∞: #{evaluation[:strength][:emoji]} #{evaluation[:strength][:level]}"
    puts "–ë–∞–ª–ª—ã: #{evaluation[:score]}/11"
    puts "\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:"
    evaluation[:feedback].each { |fb| puts "   #{fb}" }
    puts "‚ïê" * 40
  end

  def show_examples
    puts <<~EXAMPLES
      
      üí° –ü–†–ò–ú–ï–†–´ –ü–ê–†–û–õ–ï–ô
      ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      
      üîπ –ü—Ä–æ—Å—Ç–æ–π (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):
         AbC123XyZ789
      
      üîπ –°—Ä–µ–¥–Ω–∏–π (—Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏):
         MyP@ssw0rd2024!
      
      üîπ –°–ª–æ–∂–Ω—ã–π (–≤—Å–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤):
         X7#mK9$nR2@vL4&
      
      üîπ –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π (–¥–ª–∏–Ω–Ω—ã–π —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º):
         aB3$fG7!jK2@nM8%qR5^tY9*
      
      üîπ –ß–∏—Ç–∞–µ–º—ã–π (–±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤):
         BigHouse23!Jump
      
      üîπ –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:
         TechCorp2024#Secure!
      
      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
      ‚Ä¢ –ú–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      ‚Ä¢ –ú–∏–Ω–∏–º—É–º 16 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤
      ‚Ä¢ –ò–∑–±–µ–≥–∞–π —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      
    EXAMPLES
  end

  def export_passwords
    print "\nüî¢ –°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å? (1-50): "
    count = gets.chomp.to_i
    
    if count < 1 || count > 50
      puts "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50!"
      return
    end
    
    begin
      passwords = @generator.generate_multiple(count)
      export_passwords_to_file(passwords)
    rescue => e
      puts "‚ùå #{e.message}"
    end
  end

  def export_passwords_to_file(passwords)
    filename = "passwords_#{Time.now.strftime('%Y%m%d_%H%M%S')}.txt"
    
    File.open(filename, 'w') do |file|
      file.puts "# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏"
      file.puts "# –î–∞—Ç–∞: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}"
      file.puts "# –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–ª–∏–Ω–∞=#{@generator.length}, —Ç–∏–ø—ã=#{format_types}"
      file.puts "#" + "=" * 50
      file.puts
      
      passwords.each_with_index do |password, index|
        evaluation = @generator.evaluate_strength(password)
        file.puts "#{index + 1}. #{password} (#{evaluation[:strength][:level]})"
      end
    end
    
    puts "‚úÖ –ü–∞—Ä–æ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: #{filename}"
  end

  def copy_to_clipboard(text)
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –û–°)
    begin
      if RUBY_PLATFORM.match?(/darwin/) # macOS
        `echo "#{text}" | pbcopy`
        puts "‚úÖ –ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"
      elsif RUBY_PLATFORM.match?(/linux/) # Linux
        `echo "#{text}" | xclip -selection clipboard 2>/dev/null || echo "#{text}" | xsel --clipboard 2>/dev/null`
        puts "‚úÖ –ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"
      else
        puts "üìã –°–∫–æ–ø–∏—Ä—É–π –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é: #{text}"
      end
    rescue
      puts "üìã –ê–≤—Ç–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –°–∫–æ–ø–∏—Ä—É–π –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é: #{text}"
    end
  end

  def status_icon(enabled)
    enabled ? "‚úÖ –≤–∫–ª—é—á–µ–Ω–æ" : "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–æ"
  end

  def format_types
    types = []
    types << "—Å—Ç—Ä–æ—á–Ω—ã–µ" if @generator.include_lowercase
    types << "–∑–∞–≥–ª–∞–≤–Ω—ã–µ" if @generator.include_uppercase
    types << "—Ü–∏—Ñ—Ä—ã" if @generator.include_digits
    types << "—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã" if @generator.include_special
    types.join(', ')
  end

  def get_user_input
    print "‚û§ "
    gets.chomp
  end
end

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __FILE__ == $0
  begin
    app = PasswordGeneratorUI.new
    app.start
  rescue Interrupt
    puts "\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
  rescue => e
    puts "\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: #{e.message}"
    puts "üêõ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
  end
end
